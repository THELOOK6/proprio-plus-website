---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { propertyCategories } from '../data/propertyCategories';

interface Props {
  properties: CollectionEntry<'properties'>[];
}

const { properties } = Astro.props;
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {
    properties.map((property) => (
      <a
        href={`/properties/${property.slug}`}
        class="group bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition duration-300"
      >
        <div class="relative h-48 overflow-hidden">
          {property.data.images && property.data.images.length > 0 ? (
            <img
              src={property.data.images[0]}
              alt={property.data.title}
              class="w-full h-full object-cover group-hover:scale-105 transition duration-300"
            />
          ) : (
            <div class="w-full h-full bg-gray-200 flex items-center justify-center">
              <span class="text-gray-400">No Image</span>
            </div>
          )}
          <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
            <p class="text-white font-bold text-xl">${property.data.rent.toLocaleString()}/mo</p>
          </div>
        </div>

        <div class="p-4">
          <h3 class="text-lg font-semibold mb-2 group-hover:text-blue-600 transition-colors">
            {property.data.title}
          </h3>

          <p class="text-gray-600 text-sm mb-3">
            {property.data.address}
          </p>

          <div class="flex flex-wrap items-center text-sm text-gray-700 mb-3">
            <span class="flex items-center mr-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
              </svg>
              {property.data.bedrooms} beds
            </span>

            <span class="flex items-center mr-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              {property.data.bathrooms} baths
            </span>

            <span class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
              </svg>
              {property.data.sqft} sqft
            </span>
          </div>

          {property.data.categories && property.data.categories.length > 0 && (
            <div class="flex flex-wrap gap-2 mt-3">
              {property.data.categories.slice(0, 3).map((category) => (
                <span class={`text-xs px-2 py-1 rounded-full ${propertyCategories[category]?.color || 'bg-gray-100 text-gray-800'}`}>
                  {category}
                </span>
              ))}
            </div>
          )}
        </div>
      </a>
    ))
  }
</div>
